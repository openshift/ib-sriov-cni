// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	ns "github.com/containernetworking/plugins/pkg/ns"
	types "github.com/k8snetworkplumbingwg/ib-sriov-cni/pkg/types"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// ApplyVFConfig provides a mock function with given fields: conf
func (_m *Manager) ApplyVFConfig(conf *types.NetConf) error {
	ret := _m.Called(conf)

	if len(ret) == 0 {
		panic("no return value specified for ApplyVFConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.NetConf) error); ok {
		r0 = rf(conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReleaseVF provides a mock function with given fields: conf, podifName, cid, netns
func (_m *Manager) ReleaseVF(conf *types.NetConf, podifName string, cid string, netns ns.NetNS) error {
	ret := _m.Called(conf, podifName, cid, netns)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseVF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.NetConf, string, string, ns.NetNS) error); ok {
		r0 = rf(conf, podifName, cid, netns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetVFConfig provides a mock function with given fields: conf
func (_m *Manager) ResetVFConfig(conf *types.NetConf) error {
	ret := _m.Called(conf)

	if len(ret) == 0 {
		panic("no return value specified for ResetVFConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.NetConf) error); ok {
		r0 = rf(conf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupVF provides a mock function with given fields: conf, podifName, cid, netns
func (_m *Manager) SetupVF(conf *types.NetConf, podifName string, cid string, netns ns.NetNS) error {
	ret := _m.Called(conf, podifName, cid, netns)

	if len(ret) == 0 {
		panic("no return value specified for SetupVF")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.NetConf, string, string, ns.NetNS) error); ok {
		r0 = rf(conf, podifName, cid, netns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
